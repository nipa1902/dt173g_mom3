// Use me to place complete component stylings such as boxes, link styling, buttons, etc etc. 

// No text decoration
@mixin no-decoration {
    text-decoration: none;
}

// HORIZONTAL FLEX LIST WITH NESTED LIST ITEMS
@mixin horizontal-flex-list {

    ul, ol {
        display: flex;
        flex-direction: row;

        // For later projects we'll want a hamburger menu, for now just re-size the flex
        @media #{$breakpoint-small} {
                flex-direction: column;
                text-align: $alignCenter;
        }

    // Nested list items inside the ul
        li {padding: $padding-1;}
    }
        // Full-width on smaller screens
}

// SAME THING BUT CENTER CONTENT
@mixin horizontal-flex-list-center {
    @include horizontal-flex-list;
    ul, ol {
        justify-content: $alignCenter;
    }
}


// I am a half-width centered box, use me to print messages
@mixin half-box($warning: false) {
    text-align: $alignCenter;
    max-width: $halfWidth;
    margin: $marginCenter;

    @if $warning {
    border: 3px solid darken($colorWarning, 10%);
    color: $colorWarning;
    } @else {
        border: 3px solid darken($colorSuccess, 10%);
        color: $colorSuccess;
    }

    // Full-width on smaller screens
    @media #{$breakpoint-small} {
        max-width: $fullWidth;
    }
}

@mixin margin-both {
    margin-top: $margin-1;
    margin-bottom: $margin-1;
}


// Alternative code using mixins and include 
/*
// I am warning box
@mixin warning-box {
    @include half-box;
    border: 3px solid $colorWarning;
    color: $colorWarning;
}

// I am happy green box
@mixin success-box {
    @include half-box;
        border: 3px solid $colorSuccess;
        color: $colorSuccess;
}
*/


// Playing with boxes and variables
@mixin boxes($circle: false) {
    height: 10rem;
    width: 10rem;

    @if $circle {
        border-radius: 50%;
    } @else {
        border-radius: 1rem;
    }
}

@mixin error($error: false) {
    @if $error {
        background-color: $colorWarning;
        border: 3px solid black;
    } @else {
    background-color: $colorSuccess;
    }
}

#box1 {
    @include boxes;
    @include error;

    // Create a complementary colour
    border: 3px solid complement($colorSuccess);
}

#box2 {
    @include boxes($circle: true);
    @include error;

    // Dropping saturation
    background-color: saturate($colorSuccess, 25%);
    // Rotate hue of original colour for border
    border: 10px solid adjust-hue($colorSuccess, 90);
}

#box3 {
    @include boxes;
    @include error($error: true);
    
    // Mixing two colours
    background-color: mix($colorSuccess, $colorWarning, 50%);
}

#box4 {
    @include boxes($circle: true);
    @include error($error: true);

    // Playing with transparency
    background-color: fade-out($colorWarning, 0.66);
}